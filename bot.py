import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, Bot
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    CallbackContext,
    ConversationHandler
)

# ржЖржкржирж╛рж░ ржмржЯ ржЯрзЛржХрзЗржи ржПржмржВ ржЪрзНржпрж╛ржирзЗрж▓ ржЖржЗржбрж┐ ржПржЦрж╛ржирзЗ ржжрж┐ржиред
BOT_TOKEN = "8197222627:AAGjX1XrAqlNnpMYpjSKjA4yOisfeTJbQEk"
MAIN_CHANNEL_ID = -1002323042564 # ржорзВрж▓ ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржирзЗрж▓
ADMIN_NOTIFY_CHANNEL_ID = -1002787846366 # ржЕрзНржпрж╛ржбржорж┐ржи ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржирзЗрж░ ржЬржирзНржп ржжрзНржмрж┐рждрзАрзЯ ржЪрзНржпрж╛ржирзЗрж▓

# ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЗржЙржЬрж╛рж░ржирзЗржо, ржУржкрзЗржи рж╣рзНржпрж╛ржХ ржУрзЯрзЗржмрж╕рж╛ржЗржЯрзЗрж░ рж▓рж┐ржЩрзНржХ ржПржмржВ ржнрж┐ржЖржЗржкрж┐ ржЧрзНрж░рзБржкрзЗрж░ рж▓рж┐ржЩрзНржХ
ADMIN_USERNAME = "rs_rezaul_99"
HACK_WEBSITE_URL = "https://as-official-channel.netlify.app/"
VIP_GROUP_LINK = "https://t.me/+WBrUuuuIn2IwMjg1"
REFERRAL_LINK = "https://dkwin12.com/#/register?invitationCode=82626111964"

# ConversationHandler ржПрж░ ржЬржирзНржп рж╕рзНржЯрзЗржЯ
AWAITING_UID = 1

# рж▓ржЧрж┐ржВ ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

async def check_member(user_id: int, bot: Bot) -> bool:
    """
    ржпрж╛ржЪрж╛ржЗ ржХрж░рзЗ ржпрзЗ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржорзВрж▓ ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ рж╕ржжрж╕рзНржп ржХрж┐ржирж╛ред
    """
    try:
        member = await bot.get_chat_member(chat_id=MAIN_CHANNEL_ID, user_id=user_id)
        return member.status in ['member', 'creator', 'administrator']
    except Exception as e:
        logging.error(f"Error checking channel member: {e}")
        return False

async def start(update: Update, context: CallbackContext) -> None:
    """
    ржпржЦржи ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА /start ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЗред
    """
    user = update.effective_user
    is_member = await check_member(user.id, context.bot)

    if not is_member:
        # ржпржжрж┐ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ рж╕ржжрж╕рзНржп ржирж╛ рж╣рзЯ, рждржмрзЗ ржПржЗ ржмрж╛рж░рзНрждрж╛ржЯрж┐ ржжрзЗржЦрж╛ржмрзЗред
        keyboard = [
            [InlineKeyboardButton("ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи", url=f"https://t.me/{ADMIN_USERNAME}")],
            [InlineKeyboardButton("UID ржкрж╛ржарж╛ржи", callback_data="send_uid")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"ЁЯЪл **ACCESS DENIED!**\n\nржЖржкржирж┐ ржЖржорж╛ржжрзЗрж░ ржнрж┐ржЖржЗржкрж┐ ржХржорж┐ржЙржирж┐ржЯрж┐рж░ рж╕ржжрж╕рзНржп ржиржиред ржПржЗ ржмржЯржЯрж┐ рж╢рзБржзрзБржорж╛рждрзНрж░ ржЖржорж╛ржжрзЗрж░ **DKWIN** ржЯрж┐ржорзЗрж░ рж╕ржжрж╕рзНржпржжрзЗрж░ ржЬржирзНржп рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред\n\nржЖржкржирж┐ ржпржжрж┐ ржЖржорж╛ржжрзЗрж░ рж░рзЗржлрж╛рж░рзЗ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рждрзИрж░рж┐ ржХрж░рзЗржУ ржЖржорж╛ржжрзЗрж░ ржЯрж┐ржорзЗ ржпрзБржХрзНржд рж╣ржиржирж┐, рждрж╛рж╣рж▓рзЗ ржЖржкржирж╛рж░ ржЗржЙржЖржЗржбрж┐ ржкрж╛ржарж╛рждрзЗ ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржиред",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return

    # ржпржжрж┐ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ рж╕ржжрж╕рзНржп рж╣рзЯ, рждржмрзЗ ржПржЗ ржмрж╛рж░рзНрждрж╛ржЯрж┐ ржПржмржВ ржорзЗржирзБ ржжрзЗржЦрж╛ржмрзЗред
    keyboard = [
        [InlineKeyboardButton("ржУржкрзЗржи рж╣рзНржпрж╛ржХ", url=HACK_WEBSITE_URL)],
        [InlineKeyboardButton("Rules", callback_data="show_rules")],
        [InlineKeyboardButton("Tutorials", callback_data="show_tutorials")],
        [InlineKeyboardButton("ржПржбржорж┐ржирзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи", url=f"https://t.me/{ADMIN_USERNAME}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"ЁЯТО рж╕рзНржмрж╛ржЧрждржо, {user.first_name}!\n\nржЖржкржирж┐ **DKWIN** ржЯрж┐ржорзЗрж░ ржПржХржЬржи рж╕ржорзНржорж╛ржирж┐ржд ржнрж┐ржЖржЗржкрж┐ рж╕ржжрж╕рзНржпред ржЖржкржирж╛рж░ рж╕рзБржмрж┐ржзрж╛рж░ ржЬржирзНржп ржирж┐ржЪрзЗрж░ ржЕржкрж╢ржиржЧрзБрж▓рзЛ ржерзЗржХрзЗ ржмрзЗржЫрзЗ ржирж┐ржиред",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def start_uid_submission(update: Update, context: CallbackContext) -> int:
    """
    UID ржкрж╛ржарж╛ржирзЛрж░ ржкрзНрж░ржХрзНрж░рж┐рзЯрж╛ рж╢рзБрж░рзБ ржХрж░рзЗред
    """
    await update.callback_query.message.reply_text(
        "ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржкржирж╛рж░ **DKWIN** ржЗржЙржЖржЗржбрж┐ржЯрж┐ ржкрж╛ржарж╛ржиред"
    )
    return AWAITING_UID

async def receive_uid(update: Update, context: CallbackContext) -> int:
    """
    ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржкрж╛ржарж╛ржирзЛ UID ржЧрзНрж░рж╣ржг ржХрж░рзЗ ржПржмржВ ржЕрзНржпрж╛ржбржорж┐ржиржХрзЗ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржкрж╛ржарж╛рзЯред
    """
    user_uid = update.message.text
    user = update.effective_user
    
    # ржЕрзНржпрж╛ржбржорж┐ржи ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржкрж╛ржарж╛ржирзЛред
    keyboard = [
        [InlineKeyboardButton("тЬЕ Confirm", callback_data=f"confirm_{user.id}_{user_uid}"),
         InlineKeyboardButton("тЭМ Reject", callback_data=f"reject_{user.id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=ADMIN_NOTIFY_CHANNEL_ID,
        text=f"**ржирждрзБржи UID рж╕рж╛ржмржорж┐рж╢ржи**\n\nржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА: {user.first_name} (@{user.username})\nUID: `{user_uid}`",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    await update.message.reply_text(
        "ржЖржкржирж╛рж░ ржЗржЙржЖржЗржбрж┐ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗред ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЕржирзБржорзЛржжржирзЗрж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржиред ржЖржкржирж╛рж░ ржЕржирзБрж░рзЛржзржЯрж┐ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржХрж░рж╛ рж╣рж▓рзЗ ржЖржкржирж╛ржХрзЗ ржЬрж╛ржирж╛ржирзЛ рж╣ржмрзЗред"
    )
    
    return ConversationHandler.END

async def cancel_uid_submission(update: Update, context: CallbackContext) -> int:
    """
    UID рж╕рж╛ржмржорж┐рж╢ржи ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржмрж╛рждрж┐рж▓ ржХрж░рзЗред
    """
    await update.message.reply_text("ржЗржЙржЖржЗржбрж┐ рж╕рж╛ржмржорж┐рж╢ржи ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")
    return ConversationHandler.END

async def handle_admin_action(update: Update, context: CallbackContext) -> None:
    """
    ржЕрзНржпрж╛ржбржорж┐ржи Confirm ржмрж╛ Reject ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рж▓рзЗ ржПржЗ ржлрж╛ржВрж╢ржиржЯрж┐ ржХрж╛ржЬ ржХрж░ржмрзЗред
    """
    query = update.callback_query
    await query.answer()

    action = query.data.split('_')[0]
    user_id = int(query.data.split('_')[1])
    
    # ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржХрзЗ ржмрзНржпржХрзНрждрж┐ржЧрждржнрж╛ржмрзЗ ржмрж╛рж░рзНрждрж╛ ржкрж╛ржарж╛рждрзЗ
    try:
        if action == "confirm":
            await context.bot.send_message(
                chat_id=user_id,
                text=f"тЬЕ **ржЕржнрж┐ржиржирзНржжржи!**\n\nржЖржкржирж╛рж░ **DKWIN** ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗрж░ ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржЕржирзБржорзЛржжрж┐ржд рж╣ржпрж╝рзЗржЫрзЗред ржЖржкржирж┐ ржПржЦржи **DKWIN** ржЯрж┐ржорзЗрж░ ржПржХржЬржи ржнрж┐ржЖржЗржкрж┐ рж╕ржжрж╕рзНржпред ржЖржорж╛ржжрзЗрж░ ржнрж┐ржЖржЗржкрж┐ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐рждрзЗ ржирж┐ржЪрзЗрж░ рж▓рж┐ржЩрзНржХрзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи:\n\n{VIP_GROUP_LINK}",
                parse_mode='Markdown'
            )
            await query.edit_message_text(f"тЬЕ ржЕржирзБржорзЛржжрж┐рждред ржЗржЙржЖржЗржбрж┐: {query.data.split('_')[2]}ред")
        
        elif action == "reject":
            await context.bot.send_message(
                chat_id=user_id,
                text=f"тЭМ **ржжрзБржГржЦрж┐ржд!**\n\nржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржкрзНрж░рждрзНржпрж╛ржЦрзНржпрж╛ржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯржЯрж┐ ржЖржорж╛ржжрзЗрж░ рж░рзЗржлрж╛рж░рзЗрж░ ржорж╛ржзрзНржпржорзЗ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржпрж╝ржирж┐ред ржжржпрж╝рж╛ ржХрж░рзЗ ржирж┐ржЪрзЗрж░ рж▓рж┐ржВржХрзЗрж░ ржорж╛ржзрзНржпржорзЗ ржПржХржЯрж┐ ржирждрзБржи ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рждрзИрж░рж┐ ржХрж░рзБржи:\n\n{REFERRAL_LINK}",
                parse_mode='Markdown'
            )
            await query.edit_message_text("тЭМ ржкрзНрж░рждрзНржпрж╛ржЦрзНржпрж╛ржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")

    except Exception as e:
        logging.error(f"Error sending message to user {user_id}: {e}")
        await query.edit_message_text("тЭМ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржХрзЗ ржмрж╛рж░рзНрждрж╛ ржкрж╛ржарж╛ржирзЛ ржпрж╛ржпрж╝ржирж┐ред")


async def show_rules(update: Update, context: CallbackContext) -> None:
    """
    ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржпржЦржи 'Rules' ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░ржмрзЗред
    """
    query = update.callback_query
    await query.answer()
    
    rules_text = (
        "ЁЯУЬ **DKWIN ржмржЯ ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржирж┐ржпрж╝ржорж╛ржмрж▓рзА:**\n\n"
        "рзз. ржПржЗ ржмржЯржЯрж┐ рж╢рзБржзрзБржорж╛рждрзНрж░ **DKWIN** ржЯрж┐ржорзЗрж░ рж╕ржжрж╕рзНржпржжрзЗрж░ ржЬржирзНржпред\n"
        "рзи. ржмржЯрзЗрж░ ржХрзЛржирзЛ ржЕржкрж╢ржи ржЕржкржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрж╛ржмрзЗ ржирж╛ред\n"
        "рзй. ржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛ рж╣рж▓рзЗ ржПржбржорж┐ржирзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред\n"
        "рзк. ржмржЯрзЗрж░ ржорж╛ржзрзНржпржорзЗ ржкрзНрж░рж╛ржкрзНржд ржпрзЗржХрзЛржирзЛ рждржерзНржп ржмрж╛ ржЯрзБрж▓рж╕ ржмрзНржпржХрзНрждрж┐ржЧржд ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржЬржирзНржп ржПржмржВ ржЧрзЛржкржи рж░рж╛ржЦрждрзЗ рж╣ржмрзЗред"
    )
    await query.message.reply_text(rules_text, parse_mode='Markdown')

async def show_tutorials(update: Update, context: CallbackContext) -> None:
    """
    ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржпржЦржи 'Tutorials' ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░ржмрзЗред
    """
    query = update.callback_query
    await query.answer()
    
    await query.message.reply_text("ржПржЦрж╛ржирзЗ ржЯрж┐ржЙржЯрзЛрж░рж┐ржпрж╝рж╛рж▓ ржмрж╛ рж╢рж┐ржХрзНрж╖рж╛ржорзВрж▓ржХ рж░рж┐рж╕рзЛрж░рзНрж╕ рж╕ржорзНржкрж░рзНржХрж┐ржд рждржерзНржп ржерж╛ржХржмрзЗред")

def main() -> None:
    """
    ржмржЯржЯрж┐ рж╢рзБрж░рзБ ржХрж░рж╛рж░ ржЬржирзНржп ржорзВрж▓ ржлрж╛ржВрж╢ржиред
    """
    application = Application.builder().token(BOT_TOKEN).build()

    # ConversationHandler рждрзИрж░рж┐ ржХрж░рж╛
    uid_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_uid_submission, pattern="^send_uid$")],
        states={
            AWAITING_UID: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_uid)]
        },
        fallbacks=[CommandHandler("cancel", cancel_uid_submission)]
    )

    # ржмрж┐ржнрж┐ржирзНржи рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржпрзЛржЧ ржХрж░рж╛ред
    application.add_handler(CommandHandler("start", start))
    application.add_handler(uid_handler)
    application.add_handler(CallbackQueryHandler(show_rules, pattern="^show_rules$"))
    application.add_handler(CallbackQueryHandler(show_tutorials, pattern="^show_tutorials$"))
    application.add_handler(CallbackQueryHandler(handle_admin_action, pattern="^(confirm|reject)_"))

    application.run_polling()

if __name__ == "__main__":
    main()